pixel_f ray_color(const ray& r, hittable_list& worldList){
    //initialize hit record
    hit_record hitRecord;
    interval i(0.001f, infinity);
    if (worldList.hit(r, i, hitRecord)){
        auto view_direction = -r.direction();
        auto dot_product = dot(hitRecord.normal, view_direction);
        interval c_interval(0.0, 1.0);
        auto clamped_dot = float(c_interval.clamp(dot_product));
        return {clamped_dot, clamped_dot, clamped_dot};
    }

    auto unit_vec = 0.5f * (unit(r.direction()).y + 1.0f);
    return lerp_color(unit_vec, pixel_f{0.0,0.0,0.0}, pixel_f{0.5, 0.7, 1.0});
}

// old render without antialiasing
void render(const string& fname, hittable_list& world, const vec3f& ep = {0,0,0}, const float& fl = 1.0){
    initialize(ep, fl);

    ofstream out;
    out.open(fname);
    // ppm header
    out << "P3\n" << image_width << " " << image_height << "\n255\n" <<endl;
    // ppm body render
    for (int i = 0; i < image_height; i++){
        clog << "\rScanlines remaining: " << i << "/" << image_height << flush;
        for (int j = 0; j < image_width; j++){
            // color sampling without antialiasing
            auto d = pixel_center(i, j) - eye_point;
            auto r = ray(eye_point, d);
            auto mean_color = ray_color(r, world);
            auto p_i = convert_pixel_i(mean_color); // clamps colors and converts into integers
            out << p_i << " ";
        }
        out << endl;
    }
    out.close();
    clog << "\r< -------------- Done -------------- >\n" << flush;
}

// old ray_color definition before material implementation 3/08/24
pixel_f ray_color(const ray& r, hittable_list& worldList, const int& recursive_depth){
    if (recursive_depth <= 0){ // end of recursion check
        return {0,0,0};
    }

    hit_record hitRecord; // initialize hit record
    interval i(0.01f, infinity);    // clamp rays too close to surface of object
    if (worldList.hit(r, i, hitRecord)){
        // Simple diffuse material
//                auto direction = random_on_hemisphere(hitRecord.normal);
        // lambertian distribution
        auto direction = hitRecord.normal + random_unit_vector();
        auto r_on_sphere = ray(hitRecord.position, direction);
        return 0.7 * ray_color(r_on_sphere, worldList, recursive_depth-1);
    }

    auto unit_vec = unit(r.direction()).y;
    return lerp_color(unit_vec, pixel_f{1.0,1.0,1.0}, pixel_f{0.5, 0.7, 1.0});
}

inline vec3 random_in_unit_disk() {
    while (true) {
        auto p = vec3f(random_float(-1,1), random_float(-1,1), 0);
        if (p.sqr_length() < 1)
            return p;
    }
}

PLY parser: Reading ply file: ../resources/models/bunny.ply
  - Type: binary
  - Version: 1.0
  - Comment: VCGLIB generated
  - Found element: vertex (count = 3502)
    - Found property: x (type = float)
    - Found property: y (type = float)
    - Found property: z (type = float)
    - Found property: nx (type = float)
    - Found property: ny (type = float)
    - Found property: nz (type = float)
    - Found property: red (type = uchar)
    - Found property: green (type = uchar)
    - Found property: blue (type = uchar)
    - Found property: alpha (type = uchar)
  - Found element: face (count = 7000)
    - Found list property: vertex_indices (count type = uchar, data type = int)
  - Processing element: vertex
  - Processing element: face
  - Finished parsing file.